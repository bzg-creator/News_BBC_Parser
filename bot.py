import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import logging
import time
import os
from dotenv import load_dotenv

load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

BBC_CATEGORIES = {
    'world': '–ú–∏—Ä üåç',
    'politics': '–ü–æ–ª–∏—Ç–∏–∫–∞ üèõ',
    'technology': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ üíª',
    'business': '–ë–∏–∑–Ω–µ—Å üíº',
    'science': '–ù–∞—É–∫–∞ üî¨',
    'health': '–ó–¥–æ—Ä–æ–≤—å–µ üè•'
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
BBC_CATEGORY_URLS = {
    'world': 'https://www.bbc.com/news/world',
    'politics': 'https://www.bbc.com/news/politics',
    'technology': 'https://www.bbc.com/news/technology',
    'business': 'https://www.bbc.com/news/business',
    'science': 'https://www.bbc.com/news/science_and_environment',
    'health': 'https://www.bbc.com/news/health'
}


class BBCNewsParser:
    def __init__(self):
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.set_page_load_timeout(30)

    def get_news_by_category(self, category_url, limit=5):
        try:
            self.driver.get(category_url)
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "[data-testid='card-text-wrapper']"))
            )
            time.sleep(2)

            soup = BeautifulSoup(self.driver.page_source, 'html.parser')
            news_items = soup.find_all('div', {'data-testid': 'card-text-wrapper'})[:limit]

            result = []
            for item in news_items:
                title_tag = item.find('h2')
                link_tag = item.find_parent('a')
                time_tag = item.find_next('span', {'data-testid': 'card-metadata-tag'})

                if not title_tag or not link_tag:
                    continue

                title = title_tag.get_text(strip=True)
                link = 'https://www.bbc.com'  + link_tag['href']
                time_str = time_tag.get_text(strip=True) if time_tag else "–°–µ–π—á–∞—Å"

                result.append({
                    'title': title,
                    'link': link,
                    'time': time_str
                })

            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
        finally:
            self.driver.delete_all_cookies()

    def close(self):
        self.driver.quit()


class BBCNewsBot:
    def __init__(self, token):
        self.bot = Bot(token=token)
        self.parser = BBCNewsParser()
        self.dp = Dispatcher()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        self.dp.message.register(self.cmd_start, Command(commands=['start']))
        self.dp.callback_query.register(self.handle_callback)

    async def cmd_start(self, message: Message):
        await message.answer(
            "üóûÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BBC News Bot!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n"
            "üåç –ú–∏—Ä ‚Ä¢ üèõ –ü–æ–ª–∏—Ç–∏–∫–∞ ‚Ä¢ üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ‚Ä¢ üíº –ë–∏–∑–Ω–µ—Å ‚Ä¢ üî¨ –ù–∞—É–∫–∞ ‚Ä¢ üè• –ó–¥–æ—Ä–æ–≤—å–µ",
            parse_mode='HTML',
            reply_markup=self.get_main_menu_keyboard()
        )

    def get_main_menu_keyboard(self):
        buttons = [
            [InlineKeyboardButton(text=BBC_CATEGORIES[cat], callback_data=f"category_{cat}")]
            for cat in BBC_CATEGORIES
        ]
        buttons.append([
            InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="subscribe"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
        ])
        buttons.append([
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    async def handle_callback(self, callback: CallbackQuery):
        data = callback.data

        if data.startswith("category_"):
            category_key = data.replace("category_", "")
            category_name = BBC_CATEGORIES.get(category_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
            category_url = BBC_CATEGORY_URLS.get(category_key)

            if not category_url:
                await callback.message.edit_text("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            await callback.message.edit_text(
                f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b>...",
                parse_mode='HTML'
            )

            news_list = self.parser.get_news_by_category(category_url, limit=5)

            if not news_list:
                await callback.message.edit_text("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return

            await callback.message.edit_text(
                f"üóûÔ∏è <b>–ù–æ–≤–æ—Å—Ç–∏: {category_name}</b>",
                parse_mode='HTML'
            )

            for news in news_list:
                await callback.message.answer(
                    f"<b>{news['title']}</b>\n"
                    f"üïí {news['time']}\n"
                    f"üîó <a href='{news['link']}'>–ß–∏—Ç–∞—Ç—å –Ω–∞ BBC</a>",
                    parse_mode='HTML',
                    disable_web_page_preview=False
                )
                await asyncio.sleep(1)

            await callback.message.answer(
                "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_main_menu_keyboard()
            )

        elif data == "subscribe":
            await callback.message.edit_text(
                "üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!\n"
                "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏.",
                reply_markup=self.get_main_menu_keyboard()
            )

        elif data == "refresh":
            await callback.message.edit_text(
                "üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π...",
                parse_mode='HTML'
            )
            await callback.message.edit_text(
                "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_main_menu_keyboard()
            )

        elif data == "help":
            await callback.message.edit_text(
                "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É",
                parse_mode='HTML',
                reply_markup=self.get_main_menu_keyboard()
            )

    async def shutdown(self):
        self.parser.close()


async def main():
    bot = BBCNewsBot(TELEGRAM_TOKEN)
    try:
        me = await bot.bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username}")
        await bot.dp.start_polling(bot.bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.shutdown()


if __name__ == "__main__":
    asyncio.run(main())